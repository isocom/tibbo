'***********************************************************************************************************
'			PROCEDURES RELATED TO DEVICE SERVER FUNCTIONALITY
'***********************************************************************************************************

include "global.tbh"

public dim x_flags as string(9)
public dim error_mode as no_yes
public dim pat_canint as no_yes
public dim sock_connection_holdoff_tmr(MAX_NUM_SERIAL_PORTS) as byte
public dim overrun_se(MAX_NUM_SERIAL_PORTS) as no_yes
public dim overrun_es(MAX_NUM_SERIAL_PORTS) as no_yes
public dim login_mode as cmd_modes
public dim login_sock as byte
public dim login_data as string(32)
public dim login_tout as word
public dim io_state_changed(MAX_NUM_SERIAL_PORTS) as no_yes
public dim dsr_state_curr(MAX_NUM_SERIAL_PORTS), dsr_state_prev(MAX_NUM_SERIAL_PORTS) as byte
public dim dtr_state_curr(MAX_NUM_SERIAL_PORTS), dtr_state_prev(MAX_NUM_SERIAL_PORTS) as byte
public dim cts_state_curr(MAX_NUM_SERIAL_PORTS), cts_state_prev(MAX_NUM_SERIAL_PORTS) as byte
public dim rts_state_curr(MAX_NUM_SERIAL_PORTS), rts_state_prev(MAX_NUM_SERIAL_PORTS) as byte
public dim most_resent_notif_dest_ip(MAX_NUM_SERIAL_PORTS) as string(15)
public dim most_resent_notif_dest_port(MAX_NUM_SERIAL_PORTS) as word
public dim dhcp_lease_time as dword
public dim overriding_destination_set(MAX_NUM_SERIAL_PORTS) as no_yes
public dim can_show_data_transmission(MAX_NUM_SERIAL_PORTS) as no_yes
public dim quick_init_flag as quick_init_states

'Parameters that correspond to settings
public dim param_dh as no_yes
public dim param_rm(MAX_NUM_SERIAL_PORTS) as en_routing_modes		
public dim param_sf(MAX_NUM_SERIAL_PORTS) as no_yes
public dim param_cm(MAX_NUM_SERIAL_PORTS) as en_connection_modes
public dim param_dt(MAX_NUM_SERIAL_PORTS) as no_yes
public dim param_ds(MAX_NUM_SERIAL_PORTS) as low_high
public dim param_rc(MAX_NUM_SERIAL_PORTS) as no_yes
public dim param_op(MAX_NUM_SERIAL_PORTS) as no_yes
public dim param_nb(MAX_NUM_SERIAL_PORTS) as byte
public dim param_nd(MAX_NUM_SERIAL_PORTS) as last_65535


'--------------------------------------------------------------------------------
sub setting_error_detected
	error_mode=YES
end sub


'=============================================================
public function set_comm_channel_buffers(channel_num as byte, num_buffers as byte) as ok_ng
'discards socket connection, closes serial port

	dim x,y as byte
	dim use_inband as no_yes

	sock.num=SOCK_COMM+channel_num
	ser.num=channel_num

	'close sock and port -- this is essential
	sock.inconenabledmaster=NO
	sock.discard
	while sock.statesimple<>PL_SSTS_CLOSED
	wend
	ser.enabled=NO


	'decide if we will be using inband
	if sock.protocol=PL_SOCK_PROTOCOL_TCP and sock.inbandcommands=YES then
		use_inband=YES
	else
		use_inband=NO
	end if


	sock.txbuffrq(0)
	sock.rxbuffrq(0)
	sock.cmdbuffrq(0)
	sock.rplbuffrq(0)
	sock.tx2buffrq(0)
	
	ser.txbuffrq(0)
	ser.rxbuffrq(0)
	sys.buffalloc

	if sys.freebuffpages<num_buffers then
		set_comm_channel_buffers=NG
		goto exit_this
	end if

	if use_inband=NO then
		'without inband we only need two buffers minimum (TX for ser, TX for sock)
		if num_buffers<2 then
			set_comm_channel_buffers=NG
			goto exit_this
		end if
		
		'allocate equally between the buffers
		x=num_buffers/2
		y=num_buffers-x
		sock.txbuffrq(x)
		ser.txbuffrq(y)
	else
		'for inband we need 5 buffers minimum (TX for ser, TX, CMD, RPL, TX2 for sock)
		if num_buffers<5 then
			set_comm_channel_buffers=NG
			goto exit_this
		end if
		
		'CMD and RPL get 1 page each
		sock.cmdbuffrq(1)
		sock.rplbuffrq(1)
		num_buffers=num_buffers-2
		
		'the rest of our buffers gets equal number of pages, RX for ser gets more if we can't divide evenly
		x=num_buffers/3
		y=num_buffers-x*2
		sock.txbuffrq(x)
		sock.tx2buffrq(x)
		ser.txbuffrq(y)
	end if
	sys.buffalloc
	
	sock.redir(PL_REDIR_SER+ser.num) 'and ser.redir is done in set_ser_channel_for_normal_mode()

	set_comm_channel_buffers=OK
	
exit_this:	
	sock.inconenabledmaster=YES
end function


'=============================================================
public function proc_device_op(s as string(1)) as string(1)
	dim temp as string
	select case s
	case "I":
		stg_timestamp.ts_daycount = 0
		stg_timestamp.ts_mincount = 0
		stg_timestamp.ts_seconds = 0
		select case settings_restore_def(NO)
		case EN_STG_STATUS_OK:
			
		case else:
			sys.halt
		end select
	end select
goto reply_null

reply_rejected:
	proc_device_op="R"
	goto finish
reply_err:
	proc_device_op="C"
	goto finish
reply_denied:
	proc_device_op="D"
	goto finish
reply_failed:
	proc_device_op="F"
	goto finish
reply_ok:
	proc_device_op="A"
	goto finish	
finish:
reply_null:

end function

'=============================================================
public sub device_setting_set(sname as string(MAX_SETTING_NAME_LEN), index as byte, s as string)
	'********** ADDITIONAL CODE MAY BE NEEDED **********
end sub

'=============================================================
public function device_setting_check(byref setting_name as string,byref setting_val as string) as ok_ng
	'********** ADDITIONAL CODE MAY BE NEEDED **********
	device_setting_check = OK
end function 

'=============================================================
public sub device_html_login
	'********** ADDITIONAL CODE MAY BE NEEDED **********
end sub

'=============================================================
public function device_spec_arg_sg(byref setting_name as string, byref setting_val as string, byref stg_num as byte, rw as en_stg_rdwr) as en_stg_status
	'********** ADDITIONAL CODE MAY BE NEEDED **********
	device_spec_arg_sg = EN_STG_STATUS_OK
end function

'--------------------------------------------------------------------------------
function baudrate_set(br_mode as br_modes) as ok_ng
'Set the UART according to the supplied baudrate "number"

select case br_mode
	case BR_1200:
		ser.baudrate=ser.div9600*8
	case BR_2400:
		ser.baudrate=ser.div9600*4
	case BR_4800:
		ser.baudrate=ser.div9600*2
	case BR_9600:
		ser.baudrate=ser.div9600
	case BR_19200:
		ser.baudrate=ser.div9600/2
	case BR_38400:
		ser.baudrate=ser.div9600/4
	case BR_57600:
		ser.baudrate=ser.div9600/6
	case BR_115200:
		ser.baudrate=ser.div9600/12
	case BR_150:
		ser.baudrate=ser.div9600*64
	case BR_300:
		ser.baudrate=ser.div9600*32
	case BR_600:
		ser.baudrate=ser.div9600*16
	case BR_28800:
		ser.baudrate=ser.div9600/3
	case BR_230400:
		ser.baudrate=ser.div9600/24
	case BR_460800:
		ser.baudrate=ser.div9600/48
	case else
		baudrate_set=NG
		exit function
	end select

	baudrate_set=OK
end function


'--------------------------------------------------------------------------------
function baudrate_get() as br_modes
	dim i as word
	
	if ser.baudrate<=ser.div9600 then
		i=ser.div9600/ser.baudrate
		select case i
		case 1
			baudrate_get=BR_9600
		case 2
			baudrate_get=BR_19200
		case 4
			baudrate_get=BR_38400
		case 6
			baudrate_get=BR_57600
		case 12
			baudrate_get=BR_115200
		case 24
			baudrate_get=BR_230400
		case else
			baudrate_get=BR_460800
		end select
	else
		i=ser.baudrate/ser.div9600
		select case i
		case 2
			baudrate_get=BR_4800
		case 4
			baudrate_get=BR_2400
		case 8
			baudrate_get=BR_1200
		case 64
			baudrate_get=BR_150
		case 32
			baudrate_get=BR_300
		case 16
			baudrate_get=BR_600
		case else
			baudrate_get=BR_28800
		end select
	end if
	
end function

'--------------------------------------------------------------------------------
sub set_net_ip
'Correctly sets new IP for use (from the IP setting)

	dim s as string(16)
	dim x,f as byte

		s=setting_get("IP",0)
		s=ddval(s)
		
		'first number can't be 0 or >223
		x=asc(left(s,1))
		if x=0 or x>223 then
			s=right(s,3)
			s=chr(1)+s
		end if
		
		'last number can't be 0 or 255
		x=asc(right(s,1))
		if x=0 or x=255 then
			s=left(s,3)+chr(1)
		end if
		
		'shut all sockets!
		sock.inconenabledmaster=NO 
		for f=0 to sock.numofsock-1
			sock.num=f
			if sock.statesimple<>PL_SSTS_CLOSED then
				sock.discard
				while sock.statesimple<>PL_SSTS_CLOSED
				wend
			end if
		next f
		
		'change the IP
		net.ip=ddstr(s)
		sock.inconenabledmaster=YES 

end sub

'--------------------------------------------------------------------------------
function get_x_flags_net() as string(10)
	dim sock_num_bup as byte
	dim f as byte

	get_x_flags_net="/N****/**"
	
	select case login_mode
	case CMD_MODE_SERIAL:
		insert(get_x_flags_net,3,"S")
	case CMD_MODE_UDP:
		insert(get_x_flags_net,3,"U")
	case CMD_MODE_INBAND, CMD_MODE_TELNET, CMD_MODE_HTTP:
		insert(get_x_flags_net,3,"T")
	end select
	
	if error_mode=YES then insert(get_x_flags_net,4,"E")
	
	if param_dh=NO then
		insert(get_x_flags_net,5,"M")
	else
		insert(get_x_flags_net,5,"I")
	end if
	
	for f=0 to MAX_NUM_SERIAL_PORTS-1
		sock.num=SOCK_COMM+f
		if sock.statesimple=PL_SSTS_EST then
			insert(get_x_flags_net,6,"C")
			goto lb1
		end if
	next f

lb1:	
	
	for f=0 to MAX_NUM_SERIAL_PORTS-1
		if overrun_es(f)=YES then
			insert(get_x_flags_net,8,"E")
			goto lb2
		end if	
	next f
lb2:	
	for f=0 to MAX_NUM_SERIAL_PORTS-1
		if overrun_se(f)=YES then
			insert(get_x_flags_net,9,"S")
			goto lb3
		end if	
	next f
lb3:

end function

'--------------------------------------------------------------------------------
function get_x_flags_ser(channel_num as byte) as string(10)
	dim sock_num_bup as byte
	dim f as byte

	get_x_flags_ser="/N****/**"
	
	select case login_mode
	case CMD_MODE_SERIAL:
		insert(get_x_flags_ser,3,"S")
	case CMD_MODE_UDP:
		insert(get_x_flags_ser,3,"U")
	case CMD_MODE_INBAND, CMD_MODE_TELNET, CMD_MODE_HTTP:
		insert(get_x_flags_ser,3,"T")
	end select
	
	if error_mode=YES then insert(get_x_flags_ser,4,"E")
	
	if param_dh=NO then
		insert(get_x_flags_ser,5,"M")
	else
		insert(get_x_flags_ser,5,"I")
	end if
	
	sock.num=SOCK_COMM+channel_num
	select case sock.statesimple


	case PL_SSTS_CLOSED:
		select case sock.state
		case PL_SST_CL_PRESET_POPENING,
			 PL_SST_CL_PRESET_AOPENING,
			 PL_SST_CL_PRESET_EST,
			 PL_SST_CL_PRESET_PCLOSING,
			 PL_SST_CL_PRESET_ACLOSING,
			 PL_SST_CL_PRESET_STRANGE:
			'connection was reset by the other end
			insert(get_x_flags_ser,6,"R")
		case else:
			'idle (and not because it was reset by other end)
			insert(get_x_flags_ser,6,"*")
		end select

	case PL_SSTS_ARP:
		insert(get_x_flags_ser,6,"A")
	
	case PL_SSTS_PO, PL_SSTS_AO:
		insert(get_x_flags_ser,6,"O")
	
	case PL_SSTS_EST,PL_SSTS_PC, PL_SSTS_AC:
		if sock.protocol=PL_SOCK_PROTOCOL_UDP then
			insert(get_x_flags_ser,6,"U")
		else
			insert(get_x_flags_ser,6,"C")
		end if
	end select

	if overrun_es(channel_num)=YES then
		insert(get_x_flags_ser,8,"E")
	end if	

	if overrun_se(channel_num)=YES then
		insert(get_x_flags_ser,9,"S")
	end if

end function

'-------------------------------------------------------------
public sub enter_ser_prog_mode(channel_num as byte)
	ser.num=channel_num
	login_mode=CMD_MODE_SERIAL
	add_serial_channel_to_login_data(channel_num)
	#if LED_INDICATION=0
		pat.channel=0
	#else
		pat.channel=channel_num+1
	#endif
	pat.play(PAT_GAP,PL_PAT_CANINT)
	set_ser_channel_for_prog_mode(channel_num) 'this causes temporary ser port closing
	decide_on_ser_enabled(channel_num)
end sub


'-------------------------------------------------------------
public sub exit_ser_prog_mode(channel_num as byte)
	ser.num=channel_num
	
	remove_serial_channel_from_login_data(channel_num)
	if login_data="" then login_mode=CMD_MODE_NONE
	#if LED_INDICATION=0
		pat.channel=0
	#else
		pat.channel=channel_num+1
	#endif
	pat.play(PAT_GAP,PL_PAT_CANINT)
	set_ser_channel_for_normal_mode(channel_num) 'this causes temporary ser port closing
	decide_on_ser_enabled(channel_num)
end sub


'-------------------------------------------------------------
public sub set_ser_channel_for_prog_mode(channel_num as byte)
'closes serial port if it was opened

	dim x as byte
	dim ser_enabled_prev as no_yes

	ser.num=channel_num
	sock.num=SOCK_COMM+channel_num
	
	ser_enabled_prev=ser.enabled
	ser.enabled=NO
	ser.interface=PL_SER_SI_HALFDUPLEX 'will work for RS232 without flow control, as well as RS485
	ser.flowcontrol=DISABLED
	baudrate_set(BR_38400)
	ser.parity=PL_SER_PR_NONE
	ser.bits=PL_SER_BB_8
	ser.interchardelay=0
	ser.esctype=PL_SER_ET_DISABLED

	x=(ser.txbuffsize+17)/256 'this is how many pages our tx buffer occupies
	if x<=1 then
		sys.halt
		'for the serial programming mode to work, original tx buffer size should be at least 2 pages
	end if
	sock.sinkdata=YES
	ser.redir(0)
	ser.txbuffrq(x-1)
	sys.buffalloc
	ser.rxbuffrq(1)
	sys.buffalloc
	
	ser.enabled=ser_enabled_prev
end sub

'-------------------------------------------------------------
public sub set_ser_channel_for_normal_mode(channel_num as byte)
'closes serial port if it was opened

	dim x,y as byte
	dim ser_enabled_prev as no_yes

	ser.num=channel_num
	sock.num=SOCK_COMM+channel_num
		
	ser_enabled_prev=ser.enabled
	ser.enabled=NO
	
	select case val(setting_get("SI",channel_num))
	case 0:
		ser.interface=PL_SER_SI_FULLDUPLEX
		#if PLATFORM_ID=EM1000
			select case channel_num
			case 0:
				io.lineset(SER0_HDFD,HIGH)
				io.lineset(SER0_RSMD,LOW)
			case 1:
				io.lineset(SER1_HDFD,HIGH)
				io.lineset(SER1_RSMD,LOW)
			case 2:
				io.lineset(SER2_HDFD,HIGH)
				io.lineset(SER2_RSMD,LOW)
			case else:
				io.lineset(SER3_HDFD,HIGH)
				io.lineset(SER3_RSMD,LOW)
			end select
		#endif
	case 1:
		ser.interface=PL_SER_SI_HALFDUPLEX
		#if PLATFORM_ID=EM1000
			select case channel_num
			case 0:
				io.lineset(SER0_HDFD,LOW)
				io.lineset(SER0_RSMD,HIGH)
			case 1:
				io.lineset(SER1_HDFD,LOW)
				io.lineset(SER1_RSMD,HIGH)
			case 2:
				io.lineset(SER2_HDFD,LOW)
				io.lineset(SER2_RSMD,HIGH)
			case else:
				io.lineset(SER3_HDFD,LOW)
				io.lineset(SER3_RSMD,HIGH)
			end select
		#endif
	case else:
		ser.interface=PL_SER_SI_FULLDUPLEX
		#if PLATFORM_ID=EM1000
			select case channel_num
			case 0:
				io.lineset(SER0_HDFD,HIGH)
				io.lineset(SER0_RSMD,HIGH)
			case 1:
				io.lineset(SER1_HDFD,HIGH)
				io.lineset(SER1_RSMD,HIGH)
			case 2:
				io.lineset(SER2_HDFD,HIGH)
				io.lineset(SER2_RSMD,HIGH)
			case else:
				io.lineset(SER3_HDFD,HIGH)
				io.lineset(SER3_RSMD,HIGH)
			end select
		#endif
	end select

	ser.flowcontrol=val(setting_get("FC",channel_num))
	baudrate_set(val(setting_get("BR",channel_num)))
	ser.parity=val(setting_get("PR",channel_num))
	ser.bits=val(setting_get("BB",channel_num))
	ser.interchardelay=val(setting_get("MD",channel_num))
	ser.esctype=val(setting_get("SE",channel_num))
	ser.escchar=val(setting_get("EC",channel_num))
	
	x=(ser.rxbuffsize+17)/256
	ser.rxbuffrq(0)
	sys.buffalloc
	y=(ser.txbuffsize+17)/256
	y=y+x
	ser.txbuffrq(y)
	sys.buffalloc
	ser.redir(PL_REDIR_SOCK0+sock.num)
	sock.sinkdata=NO

	ser.enabled=ser_enabled_prev
end sub

'-------------------------------------------------------------
public sub set_sock_connmode(channel_num as byte)
'sets sock.inconmode and sock.reconmode from param_rm, param_sf, sock.protocol
	
	sock.num=channel_num+SOCK_COMM
	if param_rm(channel_num)=RM_CLIENT then
		sock.inconmode=PL_SOCK_INCONMODE_NONE
	else
		if param_sf(channel_num)=NO then
			sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
			if sock.protocol=PL_SOCK_PROTOCOL_UDP then
				if param_rm(channel_num)=RM_SERVER then
					sock.reconmode=PL_SOCK_RECONMODE_3
				else
					sock.reconmode=PL_SOCK_RECONMODE_1
				end if
			else
				sock.reconmode=PL_SOCK_RECONMODE_2
			end if
		else
			sock.inconmode=PL_SOCK_INCONMODE_SPECIFIC_IP_ANY_PORT

			if sock.protocol=PL_SOCK_PROTOCOL_UDP then
				if param_rm(channel_num)=RM_SERVER then
					sock.reconmode=PL_SOCK_RECONMODE_2
				else
					sock.reconmode=PL_SOCK_RECONMODE_0
				end if
			else
				sock.reconmode=PL_SOCK_RECONMODE_2
			end if


		end if
	end if
end sub

'-------------------------------------------------------------
public sub decide_on_ser_enabled(channel_num as byte)
	dim new_state as no_yes

	ser.num=channel_num
	sock.num=channel_num+SOCK_COMM

	if port_in_use(channel_num)=NO then
			new_state=NO 'port is not in use
	else
		if login_mode=CMD_MODE_SERIAL then
			new_state=YES 'port is always opened in the serial programming mode
		else
			if sock.statesimple=PL_SSTS_EST then
				new_state=YES 'port is always opened when connection is establised
			else
				if param_rm(channel_num)=RM_SERVER then
					new_state=NO 'server rounting mode --> port is closed
				else
					'server/client, client rounting modes --> need to see connection mode
					if param_cm(channel_num)=CM_DATA_COMMAND then
						new_state=YES 'we will be waiting for the data to come into the serial port
					else
						new_state=NO
					end if
				end if
			end if
		end if
	end if

	'change serial port state?
	if new_state=NO then
		'we are closing the port
		if port_in_use(channel_num)=YES and (ser.esctype=PL_SER_ET_TYPE1 or ser.esctype=PL_SER_ET_TYPE2) then
			'we must keep the port running but disable RXing
			if ser.enabled=NO then ser.enabled=YES
			if ser.sinkdata=NO then ser.sinkdata=YES
		else
			'we can disable the port
			if ser.enabled=YES then ser.enabled=NO
		end if
	else
		if port_in_use(channel_num)=YES then
			if ser.enabled=NO then ser.enabled=YES
			if ser.sinkdata=YES then ser.sinkdata=NO
		end if
	end if	
end sub

'-------------------------------------------------------------
public sub decide_on_sock_connect(channel_num as byte)

	ser.num=channel_num
	sock.num=channel_num+SOCK_COMM

	if port_in_use(channel_num)=YES then
		if param_rm(channel_num)=RM_SERVER_CLIENT or param_rm(channel_num)=RM_CLIENT then
			if param_cm(channel_num)=CM_IMMEDIATELY or sock.txlen>0 then
				sock.connect
			end if
		end if
	end if
end sub

'-------------------------------------------------------------
public function login(new_login as cmd_modes, cmd_data as string(32), sock as byte) as ok_ng
'looks at the current login attempt, checks it against current situation, makes decision to allow/reject

	if new_login>login_mode then goto lb1 'new login attempt has higher priority -- accept it unconditionally

	if new_login=login_mode then
		'same level -- we only accept relogin from the same source
		if login_data=cmd_data then
lb1:		'restart timeout timer
			select case new_login
			case CMD_MODE_INBAND:
				login_tout=LOGIN_TOUT_CONST_INBAND
			case CMD_MODE_HTTP:
				login_tout=LOGIN_TOUT_CONST_HTTP
			case CMD_MODE_TELNET:
				login_tout=LOGIN_TOUT_CONST_TELNET
			case CMD_MODE_UDP:
				login_tout=LOGIN_TOUT_CONST_UDP
			case CMD_MODE_SERIAL:
				login_tout=LOGIN_TOUT_CONST_SERIAL
			end select
			login_mode=new_login
			login_data=cmd_data
			login_sock=sock
			login=OK
			exit function
		end if
	end if

	'here when new login attempt can't be accepted
	login=NG
end function

'-------------------------------------------------------------
public function compare_logins(new_login as cmd_modes, cmd_data as string(32), sock as byte) as login_comparison_codes
'compares "proposed" new_login attempt against current, reports things
'does not perform actual login

	if login_mode=CMD_MODE_NONE then
		compare_logins=LC_WILL_ACCEPT
	else
		if login_mode>new_login then 
			compare_logins=LC_WILL_REJECT_HIGHER_IN_PROGRESS
			exit function
		end if

		if login_mode<new_login then
			compare_logins=LC_WILL_ACCEPT_LOWER_IN_PROGRESS
			exit function
		end if
		
		'here where same priority level session is already in progress
		if login_data=cmd_data then
			compare_logins=LC_WILL_ACCEPT_REPEATED_LOGIN
		else
			compare_logins=LC_WILL_REJECT_SAME_IN_PROGRESS
		end if
	end if
end function

'-------------------------------------------------------------
public sub add_serial_channel_to_login_data(channel_num as byte)

	if instr(1,login_data,str(channel_num),1)=0 then
		login_data=login_data+str(channel_num)
	end if
end sub

'-------------------------------------------------------------
public sub remove_serial_channel_from_login_data(channel_num as byte)
	dim x as byte

	x=instr(1,login_data,str(channel_num),1)
	if x<>0 then
		login_data=left(login_data,x-1)+right(login_data,len(login_data)-x)
	end if
end sub

'-------------------------------------------------------------
public function check_if_serial_channel_is_in_login_state(channel_num as byte) as no_yes
	if login_mode=CMD_MODE_SERIAL and instr(1,login_data,str(channel_num),1)<>0 then
		check_if_serial_channel_is_in_login_state=YES
	else
		check_if_serial_channel_is_in_login_state=NO
	end if
end function


'-------------------------------------------------------------
public sub logout()
	login_tout=0
	login_mode=CMD_MODE_NONE
	login_data=""
end sub

'-------------------------------------------------------------
public sub reset_login_timeout
	select case login_mode
	case CMD_MODE_INBAND:
		login_tout=LOGIN_TOUT_CONST_INBAND
	case CMD_MODE_HTTP:
		login_tout=LOGIN_TOUT_CONST_HTTP
	case CMD_MODE_TELNET:
		login_tout=LOGIN_TOUT_CONST_TELNET
	case CMD_MODE_UDP:
		login_tout=LOGIN_TOUT_CONST_UDP
	case CMD_MODE_SERIAL:
		login_tout=LOGIN_TOUT_CONST_SERIAL
	end select
end sub

'-------------------------------------------------------------
public function init_settings_of_one_channel(channel_num as byte) as ok_ng

	dim f,num_members as byte

	f=0

next_setting:	
	select case setting_get_num_members(str(f),num_members)
	case EN_STG_STATUS_UNKNOWN: 'we are done
		init_settings_of_one_channel=OK
		exit function

	case EN_STG_STATUS_OK:
		'all good
	
	case else: 'some problem
		init_settings_of_one_channel=NG
		exit function
	end select
	
	if num_members=4 then
		if setting_member_restore_def(str(f),channel_num)<>EN_STG_STATUS_OK then
			init_settings_of_one_channel=NG 'some problem
			exit function
		end if
	end if
	
	f=f+1
	goto next_setting
end function