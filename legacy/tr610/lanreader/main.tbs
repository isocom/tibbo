include "global.tbh"

include "../../lib/common/dhcp.tbh"
include "../../lib/common/common.tbh"
include "../../lib/common/settings.tbh"
include "../../lib/ttsoft/barcode.tbh"
include "../../lib/ttsoft/bpdriver.tbh"
include "../../lib/ttsoft/tcpttoudp.tbh"
include "../../lib/tr610/display.tbh"
include "../../lib/tr610/keypad.tbh"
include "../../lib/tr610/reader.tbh"
include "../../lib/tr610/relay.tbh"
include "../../lib/tr610/tr610setup.tbh"

'Settings description
'SN = Serial Number
'RS = Rotate Screen
'DH = use DHcp to get ip address; 0 - use static address; 1 - try to use DHCP server if possible
'IP = IP address
'NM = Net Mask
'GW = GateWay
'SR = Swap Relay
'PW = PassWord
'SF = Serial port Function see SerialPortFunction enum: BarCodeReader = 1, TCPTToverUDP

dim normalState as boolean = false 'means after initialization
dim fsmState as FSMStateEnum = Iddle
dim fsmStateTimeout as short = -1
dim serialPortFunction as SerialPortFunctionEnum

dim globalString1 as string = "" 'globalny string do przekazywania parametrów miedzy modulami
dim globalByte1 as byte = 0 'globalny byte do przekazywania parametrów miedzy modulami
dim globalByte2 as byte = 0 'globalny byte do przekazywania parametrów miedzy modulami

public sub changeFSMState(newState as FSMStateEnum)
  fsmStateTimeout = -1
  select case fsmState
    case Iddle
      displayShowClock(false)
	case EnteringTime
	  keypadAllLEDReset
	case SelectableList
	  keypadAllLEDReset
  end select

  select case newState
    case Iddle
      displayShowClock(true)
    case CardReaded
	  fsmStateTimeout = 20
	  displayPrintMsg(readerLastCardSN, 0, 0, lcd.width, lcd.height, YES)
	case BarCodeScanned
	  fsmStateTimeout = 20
	  displayPrintMsg(barcodeLastCode, 0, 0, lcd.width, lcd.height, YES)
	case DiplayingMsg
	  fsmStateTimeout = 100
	  displayPrintMsg(globalString1, 0, 0, lcd.width, lcd.height, YES)
	case DiplayingTxt
	  fsmStateTimeout = 100
	  displayPrintTxt(globalByte1, globalByte2, globalString1, 0, 0, lcd.width, lcd.height, NO)
	case EnteringTime
	  fsmStateTimeout = 300
	  enterTimeStart
	case PreparingToTan
	  entertimePreTan
	case Tanning
	  entertimeTan
	case SelectableList
	  fsmStateTimeout = 200
	  sellistStart
  end select

  fsmState = newState
end sub

'=============================================================
sub on_sys_init
  settingsInit("TTD-0006-02r0012")
  TR610DeviceInit(val(settingsGet("RS",0)), val(settingsGet("DH",0)), settingsGet("IP",0), settingsGet("NM",0), settingsGet("GW",0))
  relaySwap(val(settingsGet("SR",0)))
  serialPortFunction = val(settingsGet("SF",0))
  bpdriverInit(0, 1, settingsGet("BP",0), "TTD-0006-02", settingsGetSerialNumber,
    settingsGetSignature, settingsGet("LC", 0), settingsGetOTPAsset)
  select case serialPortFunction
    case BarCodeReader: barcodeInit(TR610_SERIAL_PORT_NUM)
    case TCPTToverUDP: tcpttoudpInit(1, TR610_SERIAL_PORT_NUM)
  end select
  
  displayClearAll
  displayPrint(LCD_STD_FONT, "TTD-0006-02 LanReader", 5, 05)
  displayPrint(LCD_STD_FONT, "SKU: " + settingsGetSignature, 5, 15)
  displayPrint(LCD_FIX_FONT, "SNR: " + settingsGet("SN",0), 5, 35)
  displayPrint(LCD_FIX_FONT, "IP : " + net.ip, 5, 45)
  displayPrint(LCD_FIX_FONT, "TIP: " + settingsGet("BP",0), 5, 55)

  commonSleep(5, false)
  displayShowClock(true)
  normalState = true  
end sub

'=============================================================
'System Wide 1/10 second counter, staring from 0 on powerUP

sub on_sys_timer
  if not normalState then exit sub

  relayTimer
  displayTimer
  keypadTimer
  entertimeTimer
  bpdriverTimer

  sysTimeCounter = sysTimeCounter + 1
  if fsmStateTimeout >= 0 then fsmStateTimeout = fsmStateTimeout - 1
  if fsmStateTimeout = 0 then changeFSMState(Iddle)
end sub

'======== OBSLUGA ROZKAZOW Z SIECI ============================
sub on_sock_data_arrival
  if sock.num = bpdriverSocketNumber then bpdriverReadDatagram
  if serialPortFunction = TCPTToverUDP and sock.num = tcpttoudpUDPSocketNumber then tcpttoudpSockProcess
end sub

'======== OBSLUGA PORTU SZEREGOWEGO ===========================
sub on_ser_data_arrival
  select case ser.num
    case READER_PORT_NUM:
      readerProcess
    case TR610_SERIAL_PORT_NUM:
	  select case serialPortFunction
	    case BarCodeReader: barcodeProcess
        case TCPTToverUDP: tcpttoudpSerialProcess
	  end select      
  end select

  dim newCardDetected as boolean = readerIsNewCardSNDetected

  if newCardDetected and fsmState = Iddle then
    beep.play("B", PL_BEEP_CANINT)
	bpdriverSendCardDetected(readerLastCardSN)
    changeFSMState(CardReaded)
  end if

  if newCardDetected and fsmState = SelectableList then
    beep.play("B-*B-B-", PL_BEEP_CANINT)
    bpdSendUserSelection(readerLastCardSN, sellistResult)
    changeFSMState(Iddle)
  end if
  
  if barcodeIsNewCodeReaded then
    beep.play("B*", PL_BEEP_CANINT)
	bpdriverSendBarCode(barcodeLastCode)
    changeFSMState(BarCodeScanned)
  end if  
end sub

'======== OBSLUGA KLAWIATURY =================================
sub on_kp(key_event as pl_kp_event_codes, key_code as byte)
  dim key as KeypadKeyEnum
  
  if fsmState = Iddle then
    key = keypadOnKey(key_event, key_code)
  else
    key = keypadKeyDecode(key_code)
  end if

  if fsmState = Iddle and key_event = PL_KP_EVENT_PRESSED then bpdriverSendKey(keypadToStr(key))
  if fsmState = EnteringTime then enterTimeKP(key_event, key_code)
  if fsmState = SelectableList then sellistKP(key_event, key_code)
end sub

public sub on_BPDriver_Database(byref datagram as string)
end sub
