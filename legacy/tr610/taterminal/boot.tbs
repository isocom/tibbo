include "global.tbh"

dim dhcp_flag as string(1)
dim init_flag as string(1)

declare lcd_rotate as byte
declare on_reader_event_dest as on_reader_event_destinations
declare sub key_rotate(dir as byte)

public sub boot 
	dim s as string(100)	
	dim s1,s2,s3 as string(16)
	dim timer as word
	dim b as byte
	dim login_permission as login_comparison_codes

	'initialize all libraries
	settings_init
	
		'----- SETUP LCD AND RELATED STUFF -----
	lcd_rotate=val(setting_get("MM",0))
	lcd_init
	device_lcd_print_logo

	setting_sg("ON",0,param_on,EN_STG_GET)
	setting_sg("DN",0,param_dn,EN_STG_GET)
	init_x_flags()
	'---------- DHCP ----------- 	

	'It is a good practice to indicate that we are now in DHCP
	pat.play("~G---------------",PL_PAT_CANINT)
	
	dhcp_flag = setting_get("DH",0)
	if dhcp_flag = "1" then ' DHCP enabled?
		device_check_DHCP(yes)
	else
		set_net_ip() 'correct way of setting net.ip!
		net.gatewayip = setting_get("GI",0)
		net.netmask = setting_get("NM",0)
		declare_ip_set
	end if
	sock.inconenabledmaster=YES
	
	'-------------- DS Manager -------------
	net_cmd_init

	'----------- SETUP KEYBOARD ------------	
	key_init
	key_rotate(lcd_rotate)

	'---------------- HTTP -----------------	
	html_init
	html_session_init
	
	'------ Internet Time Server Sync ------
	SNTP_init
	
	'------------ Card Reader --------------	
	reader_init
	
	'------------ SETUP BUZZER -------------
	io.num=PL_IO_NUM_45_CO
	io.enabled=YES
	
	'-------- RELAY ------------------------
	io.num = RELAY_IO1
	io.enabled = YES
	io.num = RELAY_IO2
	io.enabled = YES
	
	'------------ Device Specific ---------- 
	'device library is the control, and conjunction of all other libraries.
	device_init
	
	'------------ FDisk and Table ----------
	fd.mount
	device_tbl_result = tbl_init		
	if device_tbl_result <> EN_TBL_STATUS_OK then
		beep.divider = 20000
		beep.play("BBBBBB",PL_BEEP_NOINT)
		lcd_display_button(BMP_NONE,BMP_NONE,BMP_NO_XOFFSET,BMP_YES_XOFFSET,"0000",yes,no)
		b = ui_msg_box(MSG_HTML_TBL_FORMAT_ERROR,0,0,lcd.width-16,lcd.height,PL_LCD_TEXT_ALIGNMENT_TOP_LEFT,chr(keycodeF3)+chr(keycodeF4),yes,0)		
		if b = keycodeF4 then 
			if device_operation("M") <> "A" then
				lcd_print_msg(SYS_ERROR_FD,0,0,lcd.width,lcd.height,yes)
				device_pause(2)
			end if
			sys.reboot
		end if
	end if
	html_tables_init()
	
	'-------- CONNECT TO AGGREGATE ---------
	AggreGateInit
	
	if setting_get("AR",0) = "1" then
		sock.num=SOCK_LS
		sock.connect
	end if	
	'-------- PRINT NETWORK STATUS ---------
	if dhcp_flag = "0" then
		s1 = "OFF"
	else
		s1 = get_x_flags_net
		if mid(s1 ,EN_X_FLAGS_IP,1) = "I" then
			s1 = "OK"
			timer = sys.timercount
			while sys.timercount < timer + 6
			wend
		else
			s1 = "FAIL"
		end if
	end if
	
	'-------- screenshot -----------------
	sock.urlsubstitutes = "bmpfile.bmp,logfile.log,wl_download.log"
		
	lcd_clear(0,0,lcd.width,lcd.height)
	romfile.open(LCD_STD_FONT)
	lcd.setfont(romfile.offset)
	lcd.textverticalspacing = 1
	lcd.texthorizontalspacing=1
	lcd.textalignment = PL_LCD_TEXT_ALIGNMENT_TOP_LEFT
	lcd.printaligned("Push any button to continue...",3,lcd.height-18,lcd.width-3,18)
	if len(param_on) > 12 then 
		s2 = left(param_on,12)+"..."
	else
		s2 = param_on
	end if
	if len(param_dn) > 12 then
		s3 = left(param_dn,12)+"..."
	else
		s3 = param_dn
	end if
	s = "ON:   "+s2+"`DN:   "+s3+"`DHCP: "+s1+ "`IP:   "+net.ip+"`MAC:  " + net.mac 
	b = ui_msg_box(s,0,0,lcd.width,lcd.height-18,PL_LCD_TEXT_ALIGNMENT_TOP_LEFT,"",no,5)
	if error_settings_chker = false then
		b = ui_msg_box(SYS_ERROR_INIT,0,0,lcd.width,lcd.height,PL_LCD_TEXT_ALIGNMENT_MIDDLE_CENTER,"",yes,0)
		device_operation("I")
	end if
	'-------- MAIN PROCESS START -----------	
	init_flag = setting_get("IF",0)
	if init_flag = "0" then
		lcd_clear(0,0,lcd.width,lcd.height)
		if setting_get("TF",0) = "1" then
			lcd.textalignment = PL_LCD_TEXT_ALIGNMENT_MIDDLE_CENTER
			lcd.printaligned("Synchronizing with time server...",1,1,lcd.width,lcd.height)
			s = device_operation("K")	'sync at system reboot
			timer = sys.timercount
			while sys.timercount < timer + 6
			wend
		end if
		while true
		
clock:
			beep.divider = 20000
			beep.play("BBBB-B-B",PL_BEEP_NOINT)
			ui_clock(UI_CLOCK_X,UI_CLOCK_Y,yes)
			login_permission = compare_logins(CMD_MODE_TERMINAL,"","")
			select case login_permission
			case LC_WILL_ACCEPT_LOWER_IN_PROGRESS:
				lcd_display_button(BMP_NONE,BMP_NONE,BMP_NO_XOFFSET,BMP_YES_XOFFSET,"0000",yes,no)
				b = ui_msg_box(TERM_LOWER_PRIORITY_IN_PROC,0,0,lcd.width-16,lcd.height,PL_LCD_TEXT_ALIGNMENT_TOP_LEFT,chr(keycodeF3)+chr(keycodeF4),yes,15)
				if b = keycodeF4 then
					if login_mode = CMD_MODE_AGGREGATE then
						sock.num = SOCK_LS
						sock.close
					end if
					logout
					login(CMD_MODE_TERMINAL,"","")
					goto menu
				else
					goto clock
				end if
			case LC_WILL_ACCEPT:
				login(CMD_MODE_TERMINAL,"","")
				goto menu
			end select		
menu:
			beep.divider = 20000
			beep.play("BBBB",PL_BEEP_NOINT)
			sock.num = SOCK_LS
			if sock.statesimple = PL_SSTS_EST then sock.close
			ui_menu(19,15,lcd.width-38,lcd.height-15,"","menu_descr.txt",LCD_VERSPACE,1,LCD_MENU_TOUT)
			lcd_clear(0,0,lcd.width,lcd.height)
			logout()
		wend
	else
		lcd_clear(0,0,lcd.width,lcd.height)
		on_reader_event_dest = ON_READER_EVENT_DEST_INIT
		lcd_print_msg(MSCARD_ENROLL_NOTE,0,0,lcd.width,lcd.height,yes)
	end if	
end sub
